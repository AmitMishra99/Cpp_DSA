
                                    Leetcode 42 :- Trapping Rain Water
                             -------------------------------------------------

                01 - Brute Approach 
    -------------------------------------------

class Solution {
    public:
        int trap(vector<int>& height) {
            int n = height.size();

            // Prev
            int prev[n];
            prev[0] = -1;
            int max = height[0];
            for(int i=1;i<n;i++){
                prev[i] = max;
                if(height[i]>max) max = height[i]; 
            }

            // Next
            int next[n];
            next[n-1] = -1;
            max = height[n-1];
            for(int i=n-2;i>=0;i--){
                next[i] = max;
                if(height[i]>max) max = height[i]; 
            }

            // minimum 
            int mini[n];
            for(int i=0;i<n;i++){
                mini[i] = min(prev[i] , next[i]);
            }

            int water = 0;
            for(int i=1;i<n-1;i++){
                if(height[i]<mini[i]) water+=(mini[i]-height[i]);
            }
            return water;
        }
    };

        Brute Optimizied - Approach 2
    -------------------------------------------

    class Solution {
        public:
            int trap(vector<int>& height) {
                int n = height.size();

                // Prev
                int prev[n];
                prev[0] = -1;
                int max = height[0];
                for(int i=1;i<n;i++){
                    prev[i] = max;
                    if(height[i]>max) max = height[i]; 
                }

                // Next
                int next[n];
                next[n-1] = -1;
                max = height[n-1];
                for(int i=n-2;i>=0;i--){
                    next[i] = max;
                    if(height[i]>max) max = height[i]; 
                }

                // minimum 
                for(int i=0;i<n;i++){
                    prev[i] = min(prev[i] , next[i]);
                }

                int water = 0;
                for(int i=1;i<n-1;i++){
                    if(height[i]<prev[i]) water+=(prev[i]-height[i]);
                }
                return water;
            }
        };

            Optimized Approach 
    -------------------------------------------
        
        class Solution {
            public:
                int trap(vector<int>& height) {
                    int n = height.size();

                    // Prev
                    int prev[n];
                    int max = height[0];
                    for(int i=1;i<n;i++){
                        prev[i] = max;
                        if(height[i]>max) max = height[i]; 
                    }

                    // prev = height[n-1];
                    max = height[n-1]; 
                    for(int i=n-2;i>=0;i--){
                        if(max<prev[i]) prev[i] = max;
                        if(height[i]>max) max = height[i]; 
                    }

                    int water = 0;
                    for(int i=1;i<n-1;i++){
                        if(height[i]<prev[i]) water+=(prev[i]-height[i]);
                    }
                    return water;
                }
            };
